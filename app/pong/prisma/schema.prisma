// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// viewer: https://prisma-erd.simonknott.de/

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PSQL_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  login      String       @unique
  name       String       @unique

  avatar     String?
  sessionid  String?
  doubleFA   String?
  lastFetch  DateTime     @updatedAt

  notifs     Notif[]
  wins       Game[]
  games      PlayerGame[]
  mMaking    MatchMaking?

  channels	 ChannelUser[]

  friendsA   Friend[]     @relation("UserA")
  friendsB   Friend[]     @relation("UserB")

  invitesFrom  Invite[]   @relation("from")
  invitesTo    Invite[]   @relation("to")
}

model Notif {
  id         Int          @id @default(autoincrement())

  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  content    String
  createdAt  DateTime     @default(now())
  type       TypeNotif    @default(NOTIF)
  read       Boolean      @default(false)
}

enum TypeNotif {
  ACTION
  NOTIF
  MSG
}

model Game {
  id         Int          @id @default(autoincrement())

  name       String?
  option     String       @default("{}")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  scoreA     Int          @default(0)
  scoreB     Int          @default(0)
  winner     User?        @relation(fields: [winnerId], references: [id])
  winnerId   Int?
  winnedAt   DateTime?
  state      StateGame    @default(WAITING)

  players    PlayerGame[]
}

model PlayerGame {
  game       Game         @relation(fields: [gameId], references: [id])
  gameId     Int
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  @@id([gameId, userId])
}

enum StateGame {
  WAITING
  PLAYING
  PAUSED
  ENDED
}

model MatchMaking {
  userId     Int          @unique
  user       User         @relation(fields: [userId], references: [id])

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  startedAt  DateTime?                          // <=== TODO: Est-il utile?
  state      StateMatchMaking  @default(WAITING)
  preference String       @default("{}")
}

enum StateMatchMaking {
  WAITING
  MATCHED
  CONFIRMED
}

model Friend {
  userA      User         @relation("UserA", fields: [userAId], references: [id])
  userAId    Int
  userB      User         @relation("UserB", fields: [userBId], references: [id])
  userBId    Int
  state      StateFriend  @default(WAITING)
  @@id([userAId, userBId])
}

enum StateFriend { 
  WAITING
  FRIEND
}

model Image {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  content    Bytes
}

model Invite {
  from       User         @relation("from", fields: [fromID], references: [id])
  fromID     Int
  to         User         @relation("to", fields: [toID], references: [id])
  toID       Int
  settings   String
  createdAt  DateTime     @default(now())
  @@id([fromID, toID, settings])
}


enum ChannelUserPower {
	REGULAR
	ADMINISTRATOR
	OWNER
}

enum ChannelType {
	PUBLIC
	PRIVATE
	PRIVATE_MESSAGE
	PASSWORD_PROTECTED
}

model ChannelUser {
	id					Int		@default(autoincrement()) @id

	user				User	@relation(fields: [userId], references: [id])
	userId				Int

	channel				ChatChannel	@relation(fields: [channelId], references: [id])
	channelId			Int

	messages			ChatMessage[]

	power				ChannelUserPower

	ban_expiration	 	DateTime?
	mute_expiration		DateTime?

	@@unique([userId, channelId])
}

model ChatMessage {
	id			Int			@default(autoincrement()) @id

	sender		ChannelUser	@relation(fields: [senderId], references: [id])
	senderId	Int

	channel		ChatChannel	@relation(fields: [channelId], references: [id])
	channelId	Int

	content		String
	sent_at		DateTime	@default(now())
}

model ChatChannel {
	id			Int				@default(autoincrement()) @id

	name		String			
	users 		ChannelUser[]

	messages	ChatMessage[]

	visibility	ChannelType
	password	String?

	@@unique([name, visibility])
}