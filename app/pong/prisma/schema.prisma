// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PSQL_URL")
}

model User {
  id         Int          @default(autoincrement()) @id
  email      String       @unique
  login      String       @unique
  name       String       @unique

  avatar     String?
  sessionid  String?

  notifs     Notif[]
  wins       Game[]
  games      PlayerGame[]
  mMaking    MatchMaking?

  friendsA   Friend[]     @relation("UserA")
  friendsB   Friend[]     @relation("UserB")
}

model Notif {
  id         Int          @default(autoincrement()) @id

  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  content    String
  createdAt  DateTime     @default(now())
  type       TypeNotif    @default(NOTIF)
  read       Boolean      @default(false)
}

enum TypeNotif {
  ACTION
  NOTIF
  MSG
}

model Game {
  id         Int          @default(autoincrement()) @id

  name       String?
  option     String       @default("{}")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  scoreA     Int          @default(0)
  scoreB     Int          @default(0)
  winner     User?        @relation(fields: [winnerId], references: [id])
  winnerId   Int?
  winnedAt   DateTime?
  state      StateGame    @default(WAITING)

  players    PlayerGame[]
}

model PlayerGame {
  game       Game         @relation(fields: [gameId], references: [id])
  gameId     Int
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  @@id([gameId, userId])
}

enum StateGame {
  WAITING
  PLAYING
  PAUSED
  ENDED
}

model MatchMaking {
  userId     Int              @unique
  user       User             @relation(fields: [userId], references: [id])

  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  startedAt  DateTime?                          // <=== TODO: Est-il utile?
  state      StateMatchMaking @default(WAITING)
  preference String           @default("{}")
}

enum StateMatchMaking {
  WAITING
  MATCHED
  CONFIRMED
}

model Friend {
  userA      User            @relation("UserA", fields: [userAId], references: [id])
  userAId    Int
  userB      User            @relation("UserB", fields: [userBId], references: [id])
  userBId    Int
  state      StateFriend  @default(WAITING)
  @@id([userAId, userBId])
}

enum StateFriend { 
  WAITING 
  FRIEND 
}

model Image {
  id         Int     @default(autoincrement()) @id
  name       String  @unique
  content    Bytes
}
